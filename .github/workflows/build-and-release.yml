name: Build and Release yt-dlp GUI

on:
  schedule:
    # Run every Monday at 6:00 UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:  # Allows manual triggering

# Grant write permissions to the workflow
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for pushing changes

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyInstaller requests

      - name: Run fetch_binaries.py
        run: python yt_dlp_gui/fetch_binaries.py

      - name: Get versions
        id: get_versions
        run: python yt_dlp_gui/get_versions.py

      - name: Check for updates
        id: check_updates
        run: |
          # Create a versions file if it doesn't exist
          if (!(Test-Path versions.json)) {
            echo '{"yt-dlp": "unknown", "ffmpeg": "unknown"}' | Out-File -FilePath versions.json
          }
          
          # Read current versions
          $currentVersions = Get-Content versions.json | ConvertFrom-Json
          
          # Get new versions
          $newYtDlpVersion = "${{ steps.get_versions.outputs.yt_dlp_version }}"
          $newFfmpegVersion = "${{ steps.get_versions.outputs.ffmpeg_version }}"
          
          # Check if versions have changed
          $ytDlpUpdated = $currentVersions."yt-dlp" -ne $newYtDlpVersion
          $ffmpegUpdated = $currentVersions.ffmpeg -ne $newFfmpegVersion
          
          if ($ytDlpUpdated -or $ffmpegUpdated) {
            echo "Updates found."
            echo "has_updates=true" >> $env:GITHUB_OUTPUT
            
            # Update the versions file
            $updatedVersions = @{
              "yt-dlp" = $newYtDlpVersion
              "ffmpeg" = $newFfmpegVersion
            }
            $updatedVersions | ConvertTo-Json | Set-Content versions.json
            
            # Commit the updated versions file
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add versions.json
            git commit -m "Update version information [skip ci]"
          } else {
            echo "No updates found."
            echo "has_updates=false" >> $env:GITHUB_OUTPUT
          }

      - name: Push changes
        if: steps.check_updates.outputs.has_updates == 'true'
        run: git push

      - name: Build application
        if: steps.check_updates.outputs.has_updates == 'true'
        run: python build.py

      - name: Get current date
        id: date
        if: steps.check_updates.outputs.has_updates == 'true'
        run: echo "date=$(date +'%Y%m%d')" >> $env:GITHUB_OUTPUT

      - name: Create Release
        if: steps.check_updates.outputs.has_updates == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.date.outputs.date }}.${{ github.run_number }}
          name: Release ${{ steps.date.outputs.date }}.${{ github.run_number }}
          body: |
            Automated release of yt-dlp GUI with updated binaries.
            
            yt-dlp version: ${{ steps.get_versions.outputs.yt_dlp_version }}
            FFmpeg version: ${{ steps.get_versions.outputs.ffmpeg_version }}
            
            This release includes the latest versions of yt-dlp and ffmpeg.
          files: |
            dist/yt-dlp GUI.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}