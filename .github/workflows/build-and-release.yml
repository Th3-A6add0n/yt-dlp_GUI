name: Build and Release yt-dlp GUI

on:
  schedule:
    # Run every Monday at 6:00 UTC
    - cron: '0 6 * * 1'
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main
      - testing

permissions:
  contents: write

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      yt_dlp_version: ${{ steps.get_versions.outputs.yt_dlp_version }}
      ffmpeg_version: ${{ steps.get_versions.outputs.ffmpeg_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyInstaller requests
        timeout-minutes: 15
        continue-on-error: true
      - name: Run fetch_binaries.py
        run: python yt_dlp_gui/fetch_binaries.py
        timeout-minutes: 15
        continue-on-error: true
      - name: Get current versions
        id: get_versions
        run: |
          python yt_dlp_gui/get_current_versions.py >> $GITHUB_OUTPUT
      - name: Check for updates
        id: check_updates
        run: |
          # Create a versions file if it doesn't exist
          if [ ! -f versions.json ]; then
            echo '{"yt-dlp": "unknown", "ffmpeg": "unknown"}' > versions.json
            echo "Created new versions.json file"
          fi
          # Read current versions
          current_yt_dlp=$(grep -o '"yt-dlp": *"[^"]*"' versions.json | cut -d'"' -f4)
          current_ffmpeg=$(grep -o '"ffmpeg": *"[^"]*"' versions.json | cut -d'"' -f4)
          # Get new versions from the previous step
          new_yt_dlp="${{ steps.get_versions.outputs.yt_dlp_version }}"
          new_ffmpeg="${{ steps.get_versions.outputs.ffmpeg_version }}"
          echo "Debug: Current yt-dlp: $current_yt_dlp"
          echo "Debug: Current ffmpeg: $current_ffmpeg"
          echo "Debug: New yt-dlp: $new_yt_dlp"
          echo "Debug: New ffmpeg: $new_ffmpeg"
          # Check if versions have changed
          if [ "$current_yt_dlp" != "$new_yt_dlp" ] || [ "$current_ffmpeg" != "$new_ffmpeg" ]; then
            echo "Updates found. Updating versions file."
            # Update the versions file
            echo "{\"yt-dlp\": \"$new_yt_dlp\", \"ffmpeg\": \"$new_ffmpeg\"}" > versions.json
            # Commit the updated versions file
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add versions.json
            git commit -m "Update version information [skip ci]"
            git push
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "No updates found."
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-updates
    # Always run the build for testing branch
    # For main branch, run if there are updates or it's a scheduled run
    if: |
      (github.ref == 'refs/heads/testing') ||
      (github.ref == 'refs/heads/main' && needs.check-updates.outputs.has_updates == 'true') ||
      (github.event_name == 'schedule' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180 # Increased timeout to 3 hours
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Qt dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-xinerama0 libxcb-xinerama0-dev libxcb-icccm4 libxcb-icccm4-dev libxcb-keysyms1 libxcb-keysyms1-dev
        continue-on-error: true
      - name: Install FUSE (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse libfuse2
        continue-on-error: true
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyInstaller requests
        timeout-minutes: 20
        continue-on-error: true
      - name: Install dependencies (macOS/Linux)
        if: matrix.os != 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyInstaller requests
        timeout-minutes: 20
        continue-on-error: true
      - name: Run fetch_binaries.py
        run: python yt_dlp_gui/fetch_binaries.py
        timeout-minutes: 20
        continue-on-error: true
      - name: Build application
        run: python build.py
        timeout-minutes: 60
      - name: Check PyInstaller output (Windows)
        if: matrix.os == 'windows-latest' && always()
        run: |
          echo "=== Checking build directory ==="
          if (Test-Path "build") {
            echo "Build directory exists:"
            Get-ChildItem -Path "build" -Recurse | Select-Object -First 20
          } else {
            echo "Build directory does not exist"
          }
          echo ""
          echo "=== Checking dist directory ==="
          if (Test-Path "dist") {
            echo "Dist directory exists:"
            Get-ChildItem -Path "dist" | Format-Table
            if (Get-ChildItem -Path "dist" | Where-Object { -not $_.PsIsContainer }) {
              echo "Files in dist directory:"
              Get-ChildItem -Path "dist" -File | ForEach-Object { 
                echo "File: $($_.Name)"
              }
            } else {
              echo "Dist directory is empty"
            }
          } else {
            echo "Dist directory does not exist"
          }
          echo ""
          echo "=== Checking for PyInstaller warnings/errors ==="
          if (Test-Path "build\warn-*.txt") {
            echo "PyInstaller warnings:"
            Get-Content "build\warn-*.txt"
          }
        continue-on-error: true
      - name: Check PyInstaller output (macOS/Linux)
        if: matrix.os != 'windows-latest' && always()
        run: |
          echo "=== Checking build directory ==="
          if [ -d "build" ]; then
            echo "Build directory exists:"
            find build/ -type f | head -20
          else
            echo "Build directory does not exist"
          fi
          echo ""
          echo "=== Checking dist directory ==="
          if [ -d "dist" ]; then
            echo "Dist directory exists:"
            ls -la dist/
            if [ "$(ls -A dist/)" ]; then
              echo "Files in dist directory:"
              find dist/ -type f -exec file {} \;
            else
              echo "Dist directory is empty"
            fi
          else
            echo "Dist directory does not exist"
          fi
          echo ""
          echo "=== Checking for PyInstaller warnings/errors ==="
          if [ -f "build/warn-*.txt" ]; then
            echo "PyInstaller warnings:"
            cat build/warn-*.txt
          fi
        continue-on-error: true
      - name: List dist directory (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Contents of dist directory:"
          Get-ChildItem -Path "dist" -Recurse | Format-Table Name, Length, Mode
        continue-on-error: true
      - name: List dist directory (macOS/Linux)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Contents of dist directory:"
          ls -la dist/
        continue-on-error: true
      - name: Verify executable exists (Windows)
        id: verify_executable_windows
        if: matrix.os == 'windows-latest'
        run: |
          $exePath = "dist/yt-dlp GUI.exe"
          
          if (Test-Path $exePath) {
            $fileInfo = Get-Item $exePath
            echo "Executable found."
            echo "executable_exists=true" >> $env:GITHUB_OUTPUT
            echo "file_size=$($fileInfo.Length)" >> $env:GITHUB_OUTPUT
            echo "File details:"
            Get-Item $exePath | Format-List
          } else {
            echo "Executable not found."
            echo "executable_exists=false" >> $env:GITHUB_OUTPUT
            echo "Contents of dist directory:"
            Get-ChildItem -Path "dist" -Recurse | Format-Table Name, Length, Mode
          }
        continue-on-error: true
      - name: Verify application bundle exists (macOS)
        id: verify_app_bundle_macos
        if: matrix.os == 'macos-latest'
        run: |
          if [ -d "dist/yt-dlp GUI.app" ]; then
            echo "Application bundle found."
            echo "app_bundle_exists=true" >> $GITHUB_OUTPUT
            echo "app_size=$(du -sh "dist/yt-dlp GUI.app" | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "Application bundle not found."
            echo "app_bundle_exists=false" >> $GITHUB_OUTPUT
            echo "Contents of dist directory:"
            ls -la dist/
          fi
        continue-on-error: true
      - name: Verify DMG exists (macOS)
        id: verify_dmg_macos
        if: matrix.os == 'macos-latest'
        run: |
          if [ -f "dist/yt-dlp GUI.dmg" ]; then
            echo "DMG found."
            echo "dmg_exists=true" >> $GITHUB_OUTPUT
            echo "dmg_size=$(du -sh "dist/yt-dlp GUI.dmg" | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "DMG not found."
            echo "dmg_exists=false" >> $GITHUB_OUTPUT
            echo "Contents of dist directory:"
            ls -la dist/
          fi
        continue-on-error: true
      - name: Verify application bundle exists (Linux)
        id: verify_app_bundle_linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ -d "dist/yt-dlp GUI" ]; then
            echo "Application bundle found."
            echo "app_bundle_exists=true" >> $GITHUB_OUTPUT
            echo "app_size=$(du -sh "dist/yt-dlp GUI" | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "Application bundle not found."
            echo "app_bundle_exists=false" >> $GITHUB_OUTPUT
            echo "Contents of dist directory:"
            ls -la dist/
          fi
        continue-on-error: true
      - name: Verify AppImage exists (Linux)
        id: verify_appimage_linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ -f "dist/yt-dlp GUI.AppImage" ]; then
            echo "AppImage found."
            echo "appimage_exists=true" >> $GITHUB_OUTPUT
            echo "appimage_size=$(du -sh "dist/yt-dlp GUI.AppImage" | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "AppImage not found."
            echo "appimage_exists=false" >> $GITHUB_OUTPUT
            echo "Contents of dist directory:"
            ls -la dist/
          fi
        continue-on-error: true
      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest' && steps.verify_executable_windows.outputs.executable_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: yt-dlp-gui-${{ matrix.os }}
          path: dist/yt-dlp GUI.exe
          retention-days: 30
      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest' && steps.verify_dmg_macos.outputs.dmg_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: yt-dlp-gui-${{ matrix.os }}
          path: dist/yt-dlp GUI.dmg
          retention-days: 30
      - name: Verify tarball exists (Linux)
        id: verify_tarball_linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ -f "dist/yt-dlp GUI.tar.gz" ]; then
            echo "tarball_exists=true" >> $GITHUB_OUTPUT
            echo "tarball_size=$(du -sh "dist/yt-dlp GUI.tar.gz" | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "tarball_exists=false" >> $GITHUB_OUTPUT
            echo "Contents of dist directory:"
            ls -la dist/
          fi
        continue-on-error: true

      - name: Upload artifact (Linux) - AppImage
        if: matrix.os == 'ubuntu-latest' && steps.verify_appimage_linux.outputs.appimage_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: yt-dlp-gui-${{ matrix.os }}
          path: dist/yt-dlp GUI.AppImage
          retention-days: 30

      - name: Upload artifact (Linux) - Tarball
        if: matrix.os == 'ubuntu-latest' && steps.verify_tarball_linux.outputs.tarball_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: yt-dlp-gui-${{ matrix.os }}-tarball
          path: dist/yt-dlp GUI.tar.gz
          retention-days: 30
