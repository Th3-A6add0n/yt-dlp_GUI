name: Build and Release yt-dlp GUI

on:
  schedule:
    # Run every Monday at 6:00 UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:  # Allows manual triggering

# Grant write permissions to the workflow
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for pushing changes

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyInstaller requests

      - name: Run fetch_binaries.py
        run: python yt_dlp_gui/fetch_binaries.py

      - name: Get versions
        id: get_versions
        run: python yt_dlp_gui/get_versions.py

      - name: Debug versions output
        run: |
          echo "yt_dlp_version: ${{ steps.get_versions.outputs.yt_dlp_version }}"
          echo "ffmpeg_version: ${{ steps.get_versions.outputs.ffmpeg_version }}"

      - name: Check for updates
        id: check_updates
        run: |
          # Create a versions file if it doesn't exist
          if (!(Test-Path versions.json)) {
            echo '{"yt-dlp": "unknown", "ffmpeg": "unknown"}' | Out-File -FilePath versions.json
          }
          
          # Read current versions
          $currentVersions = Get-Content versions.json | ConvertFrom-Json
          
          # Get new versions from the previous step
          $newYtDlpVersion = "${{ steps.get_versions.outputs.yt_dlp_version }}"
          $newFfmpegVersion = "${{ steps.get_versions.outputs.ffmpeg_version }}"
          
          # Debug current versions
          echo "Current yt-dlp version: $($currentVersions."yt-dlp")"
          echo "Current ffmpeg version: $($currentVersions.ffmpeg)"
          echo "New yt-dlp version: $newYtDlpVersion"
          echo "New ffmpeg version: $newFfmpegVersion"
          
          # Check if versions have changed
          $ytDlpUpdated = $currentVersions."yt-dlp" -ne $newYtDlpVersion
          $ffmpegUpdated = $currentVersions.ffmpeg -ne $newFfmpegVersion
          
          echo "yt-dlp updated: $ytDlpUpdated"
          echo "ffmpeg updated: $ffmpegUpdated"
          
          if ($ytDlpUpdated -or $ffmpegUpdated) {
            echo "Updates found."
            echo "has_updates=true" >> $env:GITHUB_OUTPUT
            
            # Update the versions file
            $updatedVersions = @{
              "yt-dlp" = $newYtDlpVersion
              "ffmpeg" = $newFfmpegVersion
            }
            $updatedVersions | ConvertTo-Json | Set-Content versions.json
            
            # Commit the updated versions file
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add versions.json
            git commit -m "Update version information [skip ci]"
          } else {
            echo "No updates found."
            echo "has_updates=false" >> $env:GITHUB_OUTPUT
          }

      - name: Debug check_updates output
        run: |
          echo "check_updates.has_updates: ${{ steps.check_updates.outputs.has_updates }}"

      - name: Force build for testing
        run: |
          echo "Forcing build for testing purposes"
          echo "has_updates=true" >> $env:GITHUB_OUTPUT

      - name: Pull latest changes
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull origin main --rebase

      - name: Push changes
        if: steps.check_updates.outputs.has_updates == 'true'
        run: git push

      - name: Build application
        if: steps.check_updates.outputs.has_updates == 'true'
        run: python build.py

      - name: Verify executable exists
        id: verify_executable
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          if (Test-Path "dist/yt-dlp GUI.exe") {
            echo "Executable found."
            echo "executable_exists=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "Executable not found."
            echo "executable_exists=false" >> $env:GITHUB_OUTPUT
            exit 1
          }

      - name: List dist directory contents
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          echo "Contents of dist directory:"
          Get-ChildItem -Path "dist" | Format-Table Name, Length

      - name: Get current date
        id: date
        if: steps.check_updates.outputs.has_updates == 'true'
        run: echo "date=$(date +'%Y%m%d')" >> $env:GITHUB_OUTPUT

      - name: Debug release info
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          echo "Date output: ${{ steps.date.outputs.date }}"
          echo "Run number: ${{ github.run_number }}"
          echo "Tag name: v${{ steps.date.outputs.date }}.${{ github.run_number }}"

      - name: Install GitHub CLI
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          # Create a temporary directory for GitHub CLI
          New-Item -ItemType Directory -Path "gh-cli-temp" -Force | Out-Null
          
          # Download GitHub CLI
          $url = "https://github.com/cli/cli/releases/download/v2.40.1/gh_2.40.1_windows_amd64.zip"
          Invoke-WebRequest -Uri $url -OutFile "gh-cli-temp/gh.zip"
          
          # Extract GitHub CLI to the temporary directory
          Expand-Archive -Path "gh-cli-temp/gh.zip" -DestinationPath "gh-cli-temp" -Force
          
          # Add GitHub CLI to PATH using Environment Files
          echo "GITHUB_CLI_PATH=$env:GITHUB_WORKSPACE\gh-cli-temp\bin" >> $env:GITHUB_ENV
          
          # Clean up
          Remove-Item "gh-cli-temp/gh.zip" -Force

      - name: Create Release with GitHub CLI
        if: steps.check_updates.outputs.has_updates == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $tagName = "v${{ steps.date.outputs.date }}.${{ github.run_number }}"
          $releaseTitle = "Release ${{ steps.date.outputs.date }}.${{ github.run_number }}"
          $releaseNotes = @"
          Automated release of yt-dlp GUI with updated binaries.
          
          yt-dlp version: ${{ steps.get_versions.outputs.yt_dlp_version }}
          FFmpeg version: ${{ steps.get_versions.outputs.ffmpeg_version }}
          
          This release includes the latest versions of yt-dlp and ffmpeg.
          "@
          
          # Create release
          gh release create $tagName --title "$releaseTitle" --notes "$releaseNotes" "dist/yt-dlp GUI.exe"
          
          echo "Release created successfully."
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/$tagName"

      - name: Log release result
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          echo "Release step completed."
          echo "has_updates: ${{ steps.check_updates.outputs.has_updates }}"
          echo "executable_exists: ${{ steps.verify_executable.outputs.executable_exists }}"