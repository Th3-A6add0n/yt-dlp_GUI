name: Build and Release yt-dlp GUI

on:
  schedule:
    # Run every Monday at 6:00 UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      yt_dlp_version: ${{ steps.get_versions.outputs.yt_dlp_version }}
      ffmpeg_version: ${{ steps.get_versions.outputs.ffmpeg_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyInstaller requests
      
      - name: Run fetch_binaries.py
        run: python yt_dlp_gui/fetch_binaries.py
      
      - name: Get current versions
        id: get_versions
        run: |
          $output = python yt_dlp_gui/get_current_versions.py
          foreach ($line in $output) {
            echo $line >> $env:GITHUB_OUTPUT
          }
      
      - name: Check for updates
        id: check_updates
        run: |
          # Create a versions file if it doesn't exist
          if (!(Test-Path versions.json)) {
            echo '{"yt-dlp": "unknown", "ffmpeg": "unknown"}' | Out-File -FilePath versions.json
          }
          
          # Read current versions
          $currentVersions = Get-Content versions.json | ConvertFrom-Json
          
          # Get new versions from the previous step
          $newYtDlpVersion = "${{ steps.get_versions.outputs.yt_dlp_version }}"
          $newFfmpegVersion = "${{ steps.get_versions.outputs.ffmpeg_version }}"
          
          # Check if versions have changed
          $ytDlpUpdated = $currentVersions."yt-dlp" -ne $newYtDlpVersion
          $ffmpegUpdated = $currentVersions.ffmpeg -ne $newFfmpegVersion
          $hasUpdates = $ytDlpUpdated -or $ffmpegUpdated
          
          echo "has_updates=$hasUpdates" >> $env:GITHUB_OUTPUT
          echo "yt_dlp_version=$newYtDlpVersion" >> $env:GITHUB_OUTPUT
          echo "ffmpeg_version=$newFfmpegVersion" >> $env:GITHUB_OUTPUT
          
          if ($hasUpdates) {
            echo "Updates found. Updating versions file."
            
            # Update the versions file
            $updatedVersions = @{
              "yt-dlp" = $newYtDlpVersion
              "ffmpeg" = $newFfmpegVersion
            }
            $updatedVersions | ConvertTo-Json | Set-Content versions.json
            
            # Commit the updated versions file
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add versions.json
            git commit -m "Update version information [skip ci]"
            git push
          } else {
            echo "No updates found."
          }

  build:
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true'
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyInstaller requests
      
      - name: Run fetch_binaries.py
        run: python yt_dlp_gui/fetch_binaries.py
      
      - name: Build application
        run: python build.py
      
      - name: Verify executable exists
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            EXECUTABLE="dist/yt-dlp GUI.exe"
          else
            EXECUTABLE="dist/yt-dlp GUI"
          fi
          
          if [ -f "$EXECUTABLE" ]; then
            echo "Executable found."
          else
            echo "Executable not found."
            exit 1
          fi
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: yt-dlp-gui-${{ matrix.os }}
          path: |
            dist/yt-dlp GUI.exe
            dist/yt-dlp GUI

  release:
    needs: [check-updates, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $env:GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-updates.outputs.yt_dlp_version }}.${{ needs.check-updates.outputs.ffmpeg_version }}.${{ steps.date.outputs.date }}
          name: Release ${{ needs.check-updates.outputs.yt_dlp_version }}.${{ needs.check-updates.outputs.ffmpeg_version }}.${{ steps.date.outputs.date }}
          body: |
            Automated release of yt-dlp GUI with updated binaries.
            
            yt-dlp version: ${{ needs.check-updates.outputs.yt_dlp_version }}
            FFmpeg version: ${{ needs.check-updates.outputs.ffmpeg_version }}
            
            This release includes the latest versions of yt-dlp and ffmpeg.
          files: |
            artifacts/yt-dlp-gui-windows-latest/yt-dlp GUI.exe
            artifacts/yt-dlp-gui-macos-latest/yt-dlp GUI
            artifacts/yt-dlp-gui-ubuntu-latest/yt-dlp GUI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}